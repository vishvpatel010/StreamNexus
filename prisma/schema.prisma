datasource db {
    provider = "mongodb"
    url      = env("DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
}

model User {
    id             String   @id @default(uuid()) @map("_id")
    username       String   @unique
    imageUrl       String
    externalUserId String   @unique
    bio            String?
    following      Follow[] @relation("Following")
    followedBy     Follow[] @relation("FollowedBy")
    blocking       Block[]  @relation("Blocking")
    blockedBy      Block[]  @relation("BlockedBy")
    stream         Stream?
    createdAt      DateTime @default(now())
    updatedAt      DateTime @updatedAt
}

model Stream {
    id                  String   @id @default(uuid()) @map("_id")
    name                String
    thumbnailUrl        String?
    ingressId           String?  @unique
    serverUrl           String?
    streamKey           String?
    isLive              Boolean  @default(false)
    isChatEnabled       Boolean  @default(true)
    isChatDelayed       Boolean  @default(false)
    isChatFollowersOnly Boolean  @default(false)
    userId              String   @unique
    user                User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    createdAt           DateTime @default(now())
    updatedAt           DateTime @updatedAt
}

model Follow {
    id          String   @id @default(uuid()) @map("_id")
    followerId  String
    followingId String
    follower    User     @relation(name: "Following", fields: [followerId], references: [id], onDelete: Cascade)
    following   User     @relation(name: "FollowedBy", fields: [followingId], references: [id], onDelete: Cascade)
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt

    @@unique([followerId, followingId])
}

model Block {
    id        String @id @default(uuid()) @map("_id")
    blockerId String
    blockedId String
    blocker   User   @relation(name: "Blocking", fields: [blockerId], references: [id], onDelete: Cascade)
    blocked   User   @relation(name: "BlockedBy", fields: [blockedId], references: [id], onDelete: Cascade)

    @@unique([blockerId, blockedId])
}
